<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HttpServerLite</name>
    </assembly>
    <members>
        <member name="T:HttpServerLite.AccessControlManager">
            <summary>
            Access control manager.  Dictates which connections are permitted or denied.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlManager.DenyList">
            <summary>
            Matcher to match denied addresses.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlManager.PermitList">
            <summary>
            Matcher to match permitted addresses.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlManager.Mode">
            <summary>
            Access control mode, either DefaultPermit or DefaultDeny.
            DefaultPermit: allow everything, except for those explicitly denied.
            DefaultDeny: deny everything, except for those explicitly permitted.
            </summary>
        </member>
        <member name="M:HttpServerLite.AccessControlManager.#ctor(HttpServerLite.AccessControlMode)">
            <summary>
            Instantiate the object.
            </summary> 
            <param name="mode">Access control mode.</param>
        </member>
        <member name="M:HttpServerLite.AccessControlManager.Permit(System.String)">
            <summary>
            Permit or deny a request based on IP address.  
            When operating in 'default deny', only white listed entries are permitted. 
            When operating in 'default permit', everything is allowed unless explicitly denied.
            </summary>
            <param name="ip">The IP address to evaluate.</param>
            <returns>True if permitted.</returns>
        </member>
        <member name="T:HttpServerLite.AccessControlMode">
            <summary>
            Access control mode of operation.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlMode.DefaultPermit">
            <summary>
            Permit requests from any endpoint by default.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlMode.DefaultDeny">
            <summary>
            Deny requests from any endpoint by default.
            </summary>
        </member>
        <member name="T:HttpServerLite.Chunk">
            <summary>
            A chunk of data, used when reading from a request where the Transfer-Encoding header includes 'chunked'.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.Length">
            <summary>
            Length of the data.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.Data">
            <summary>
            Data.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.Metadata">
            <summary>
            Any additional metadata that appears on the length line after the length hex value and semicolon.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.IsFinalChunk">
            <summary>
            Indicates whether or not this is the final chunk, i.e. the chunk length received was zero.
            </summary>
        </member>
        <member name="T:HttpServerLite.ContentRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path.
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRoute.Path">
            <summary>
            The pattern against which the raw URL should be matched.  
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRoute.IsDirectory">
            <summary>
            Indicates whether or not the path specifies a directory.  If so, any matching URL will be handled by the specified handler.
            </summary>
        </member>
        <member name="M:HttpServerLite.ContentRoute.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new route object.
            </summary> 
            <param name="path">The pattern against which the raw URL should be matched.</param>
            <param name="isDirectory">Indicates whether or not the path specifies a directory.  If so, any matching URL will be handled by the specified handler.</param> 
        </member>
        <member name="T:HttpServerLite.ContentRouteManager">
            <summary>
            Content route manager.  Content routes are used for GET and HEAD requests to specific files or entire directories.
            </summary>
        </member>
        <member name="P:HttpServerLite.ContentRouteManager.BaseDirectory">
            <summary>
            Base directory for files and directories accessible via content routes.
            </summary>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Add(System.String,System.Boolean)">
            <summary>
            Add a route.
            </summary>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="isDirectory">True if the path represents a directory.</param>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Remove(System.String)">
            <summary>
            Remove a route.
            </summary>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Get(System.String)">
            <summary>
            Retrieve a content route.
            </summary>
            <param name="path">URL path.</param>
            <returns>ContentRoute if the route exists, otherwise null.</returns>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Exists(System.String)">
            <summary>
            Check if a content route exists.
            </summary>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:HttpServerLite.ContentRouteProcessor">
            <summary>
            Content route processor.  Handles GET and HEAD requests to content routes for files and directories. 
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRouteProcessor.ContentFileMode">
            <summary>
            The FileMode value to use when accessing files within a content route via a FileStream.  Default is FileMode.Open.
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRouteProcessor.ContentFileAccess">
            <summary>
            The FileAccess value to use when accessing files within a content route via a FileStream.  Default is FileAccess.Read.
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRouteProcessor.ContentFileShare">
            <summary>
            The FileShare value to use when accessing files within a content route via a FileStream.  Default is FileShare.Read.
            </summary>
        </member>
        <member name="T:HttpServerLite.DefaultHeaderValues">
            <summary>
            Headers that will be added to every response unless previously set.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.AccessControlAllowOrigin">
            <summary>
            Access-Control-Allow-Origin header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.AccessControlAllowMethods">
            <summary>
            Access-Control-Allow-Methods header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.AccessControlAllowHeaders">
            <summary>
            Access-Control-Allow-Headers header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.AccessControlExposeHeaders">
            <summary>
            Access-Control-Expose-Headers header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.Accept">
            <summary>
            Accept header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.AcceptLanguage">
            <summary>
            Accept-Language header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.AcceptCharset">
            <summary>
            Accept-Charset header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.Connection">
            <summary>
            Connection header.
            </summary>
        </member>
        <member name="F:HttpServerLite.DefaultHeaderValues.Host">
            <summary>
            Host header.
            </summary>
        </member>
        <member name="M:HttpServerLite.DefaultHeaderValues.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="T:HttpServerLite.DynamicRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path regex.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRoute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRoute.Path">
            <summary>
            The pattern against which the raw URL should be matched.  
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRoute.Handler">
            <summary>
            The handler for the dynamic route.
            </summary>
        </member>
        <member name="M:HttpServerLite.DynamicRoute.#ctor(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Create a new route object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The pattern against which the raw URL should be matched.</param>
            <param name="handler">The method that should be called to handle the request.</param>
        </member>
        <member name="T:HttpServerLite.DynamicRouteAttribute">
            <summary>
            Attribute that is used to mark methods as a dynamic route.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRouteAttribute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRouteAttribute.Path">
            <summary>
            The pattern against which the raw URL should be matched. Must be convertible to a regular expression. 
            </summary>
        </member>
        <member name="M:HttpServerLite.DynamicRouteAttribute.#ctor(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The regular expression pattern against which the raw URL should be matched.</param>
        </member>
        <member name="T:HttpServerLite.DynamicRouteManager">
            <summary>
            Dynamic route manager.  Dynamic routes are used for requests using any HTTP method to any path that can be matched by regular expression.
            </summary>
        </member>
        <member name="P:HttpServerLite.DynamicRouteManager.Matcher">
            <summary>
            Directly access the underlying regular expression matching library.
            This is helpful in case you want to specify the matching behavior should multiple matches exist.
            </summary>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Add(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Add a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="handler">Method to invoke.</param>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Remove(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex)">
            <summary>
            Remove a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Exists(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex)">
            <summary>
            Check if a content route exists.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Match(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Match a request method and URL to a handler method.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="rawUrl">URL path.</param>
            <returns>Method to invoke.</returns>
        </member>
        <member name="T:HttpServerLite.EventCallbacks">
            <summary>
            Callbacks/actions to use when various events are encountered.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.ConnectionReceived">
            <summary>
            Callback/action to call when a connection is received.
            string: IP address of the client.
            int: Source TCP port of the client.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.RequestReceived">
            <summary>
            Callback/action to call when a request is received.
            string: IP address of the client.
            int: Source TCP port of the client.
            string: HTTP method.
            string: Full URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.AccessControlDenied">
            <summary>
            Callback/action to call when a request is denied due to access control.
            string: IP address of the client.
            int: Source TCP port of the client.
            string: HTTP method.
            string: Full URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.ResponseSent">
            <summary>
            Callback/action to call when a response is sent.
            string: IP address of the client.
            int: Source TCP port of the client.
            string: HTTP method.
            string: Full URL.
            int: Response status code.
            double: Number of milliseconds.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.ExceptionEncountered">
            <summary>
            Callback/action to call when an exception is encountered.
            string: IP address of the client.
            int: Source TCP port of the client.
            Exception: Exception encountered.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.ServerStarted">
            <summary>
            Callback/action to call when the server is started.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.ServerStopped">
            <summary>
            Callback/action to call when the server is stopped.
            </summary>
        </member>
        <member name="P:HttpServerLite.EventCallbacks.ServerDisposed">
            <summary>
            Callback/action to call when the server is disposed.
            </summary>
        </member>
        <member name="M:HttpServerLite.EventCallbacks.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:HttpServerLite.HttpContext">
            <summary>
            HTTP context including both request and response.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpContext.Request">
            <summary>
            The HTTP request that was received.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpContext.Response">
            <summary>
            The HTTP response that will be sent.  This object is preconstructed on your behalf and can be modified directly.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpContext.StreamBufferSize">
            <summary>
            Buffer size to use while writing the response from a supplied stream. 
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpContext.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:HttpServerLite.HttpMethod">
            <summary>
            HTTP methods, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.GET">
            <summary>
            HTTP GET.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.HEAD">
            <summary>
            HTTP HEAD.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.PUT">
            <summary>
            HTTP PUT.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.POST">
            <summary>
            HTTP POST.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.DELETE">
            <summary>
            HTTP DELETE.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.PATCH">
            <summary>
            HTTP PATCH.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.CONNECT">
            <summary>
            HTTP CONNECT.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.OPTIONS">
            <summary>
            HTTP OPTIONS.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.TRACE">
            <summary>
            HTTP TRACE.
            </summary>
        </member>
        <member name="T:HttpServerLite.HttpRequest">
            <summary>
            Data extracted from an incoming HTTP request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.StreamBufferSize">
            <summary>
            Buffer size to use while writing the response from a supplied stream. 
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.TimestampUtc">
            <summary>
            UTC timestamp from when the request was received.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.ThreadId">
            <summary>
            Thread ID on which the request exists.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.ProtocolVersion">
            <summary>
            The protocol and version.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.SourceIp">
            <summary>
            IP address of the requestor (client).
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.SourcePort">
            <summary>
            TCP port from which the request originated on the requestor (client).
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.DestHostname">
            <summary>
            The destination hostname as found in the request line, if present.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.DestHostPort">
            <summary>
            The destination host port as found in the request line, if present.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.Keepalive">
            <summary>
            Specifies whether or not the client requested HTTP keepalives.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.Method">
            <summary>
            The HTTP method used in the request.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.FullUrl">
            <summary>
            The full URL as sent by the requestor (client).
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.RawUrlWithQuery">
            <summary>
            The raw (relative) URL with the querystring attached.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.RawUrlWithoutQuery">
            <summary>
            The raw (relative) URL without the querystring attached.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.RawUrlEntries">
            <summary>
            List of items found in the raw URL.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.Querystring">
            <summary>
            The querystring attached to the URL.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.QuerystringEntries">
            <summary>
            Dictionary containing key-value pairs from items found in the querystring.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.Useragent">
            <summary>
            The useragent specified in the request.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.ContentLength">
            <summary>
            The number of bytes in the request body.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.ContentType">
            <summary>
            The content type as specified by the requestor (client).
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpRequest.Headers">
            <summary>
            The headers found in the request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Data">
            <summary>
            Bytes from the DataStream property.  Using Data will fully read the DataStream property and thus it cannot be read again.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.DataStream">
            <summary>
            The stream containing request data.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.#ctor(System.String,System.IO.Stream,System.Byte[])">
            <summary>
            Create an HttpRequest object from a byte array.
            </summary>
            <param name="ipPort">IP:port of the requestor.</param>
            <param name="stream">Client stream.</param>
            <param name="bytes">Bytes.</param>
            <returns>HttpRequest.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.ToString">
            <summary>
            Retrieve a string-formatted, human-readable copy of the HttpRequest instance.
            </summary>
            <returns>String-formatted, human-readable copy of the HttpRequest instance.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.RetrieveHeaderValue(System.String)">
            <summary>
            Retrieve a specified header value from either the headers or the querystring (case insensitive).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.HeaderExists(System.String,System.Boolean)">
            <summary>
            Determine if a header exists.
            </summary>
            <param name="key">Header key.</param>
            <param name="caseSensitive">Specify whether a case sensitive search should be used.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.QuerystringExists(System.String,System.Boolean)">
            <summary>
            Determine if a querystring entry exists.
            </summary>
            <param name="key">Querystring key.</param>
            <param name="caseSensitive">Specify whether a case sensitive search should be used.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.DataAsString">
            <summary>
            Read the data stream fully and retrieve the string data contained within.
            Note: if you use this method, you will not be able to read from the data stream afterward.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.DataAsJsonObject``1">
            <summary>
            Read the data stream fully and convert the data to the object type specified using JSON deserialization.
            Note: if you use this method, you will not be able to read from the data stream afterward.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <returns>Object of type specified.</returns>
        </member>
        <member name="T:HttpServerLite.HttpResponse">
            <summary>
            Response to an HTTP request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpResponse.StreamBufferSize">
            <summary>
            Buffer size to use while writing the response from a supplied stream. 
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.ProtocolVersion">
            <summary>
            The protocol and version.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.StatusCode">
            <summary>
            The HTTP status code to return to the requestor (client).
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.StatusDescription">
            <summary>
            The HTTP status description to return to the requestor (client).
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpResponse.Headers">
            <summary>
            User-supplied headers to include in the response.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.ContentType">
            <summary>
            User-supplied content-type to include in the response.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.ContentLength">
            <summary>
            The length of the supplied response data.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.AccessControlAllowOriginHeader">
            <summary>
            Access-Control-Allow-Origin header value.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpResponse.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpResponse.ToString">
            <summary>
            Retrieve a string-formatted, human-readable copy of the HttpResponse instance.
            </summary>
            <returns>String-formatted, human-readable copy of the HttpResponse instance.</returns>
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Boolean)">
            <summary>
            Send headers and no data to the requestor and terminate the connection.
            </summary> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Int64)">
            <summary>
            Send headers with a specified content length and no data to the requestor and terminate the connection.  Useful for HEAD requests where the content length must be set.
            </summary> 
            <param name="contentLength">Value to set in Content-Length header.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.String)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Byte[])">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Int64,System.IO.Stream)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.Int64)">
            <summary>
            Send headers with a specified content length and no data to the requestor and terminate the connection.  Useful for HEAD requests where the content length must be set.
            </summary> 
            <param name="contentLength">Value to set in Content-Length header.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.String)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.Byte[])">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.Int64,System.IO.Stream)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.Int64)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Value to set in Content-Length header.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.String)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.Byte[])">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.Int64,System.IO.Stream)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.Int64)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Value to set in Content-Length header.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.String)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.Byte[])">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.Int64,System.IO.Stream)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="T:HttpServerLite.MimeTypes">
            <summary>
            MIME types and file extensions.
            </summary>
        </member>
        <member name="M:HttpServerLite.MimeTypes.#ctor">
            <summary>
            Instantiates the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.MimeTypes.GetFromExtension(System.String)">
            <summary>
            Retrieve MIME type from file extension.
            </summary>
            <param name="extension">File extension.</param>
            <returns>String containing MIME type.</returns>
        </member>
        <member name="T:HttpServerLite.ReflectionCore">
            <summary>
            Helper methods for reflection.
            </summary>
        </member>
        <member name="M:HttpServerLite.ReflectionCore.LoadRoutes``1(``0,System.Reflection.Assembly)">
            <summary>
            Load routes for the server.
            </summary>
            <typeparam name="T">Webserver.</typeparam>
            <param name="server">Webserver.</param>
            <param name="assembly">Assembly.</param>
            <returns>Webserver.</returns>
        </member>
        <member name="T:HttpServerLite.RouteAttribute">
            <summary>
            Attribute that is used to mark methods as route methods.
            </summary>
        </member>
        <member name="P:HttpServerLite.RouteAttribute.Path">
            <summary>
            The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.
            </summary>
        </member>
        <member name="P:HttpServerLite.RouteAttribute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="M:HttpServerLite.RouteAttribute.#ctor(System.String,HttpServerLite.HttpMethod)">
            <summary>Instantiate the object.</summary>
            <param name="path">The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.</param>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
        </member>
        <member name="T:HttpServerLite.StaticRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRoute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRoute.Path">
            <summary>
            The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRoute.Handler">
            <summary>
            The 
            </summary>
        </member>
        <member name="M:HttpServerLite.StaticRoute.#ctor(HttpServerLite.HttpMethod,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Create a new route object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.</param>
            <param name="handler">The method that should be called to handle the request.</param>
        </member>
        <member name="T:HttpServerLite.StaticRouteAttribute">
            <summary>
            Attribute that is used to mark methods as a static route.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRouteAttribute.Path">
            <summary>
            The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRouteAttribute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="M:HttpServerLite.StaticRouteAttribute.#ctor(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.</param>
        </member>
        <member name="T:HttpServerLite.StaticRouteManager">
            <summary>
            Static route manager.  Static routes are used for requests using any HTTP method to a specific path.
            </summary>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Add(HttpServerLite.HttpMethod,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Add a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="handler">Method to invoke.</param>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Remove(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Remove a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Get(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Retrieve a static route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>StaticRoute if the route exists, otherwise null.</returns>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Exists(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Check if a static route exists.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Match(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Match a request method and URL to a handler method.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>Method to invoke.</returns>
        </member>
        <member name="T:HttpServerLite.Statistics">
            <summary>
            Webserver statistics.
            </summary>
        </member>
        <member name="P:HttpServerLite.Statistics.StartTime">
            <summary>
            The time at which the client or server was started.
            </summary>
        </member>
        <member name="P:HttpServerLite.Statistics.UpTime">
            <summary>
            The amount of time which the client or server has been up.
            </summary>
        </member>
        <member name="P:HttpServerLite.Statistics.ReceivedPayloadBytes">
            <summary>
            The number of payload bytes received (incoming request body).
            </summary>
        </member>
        <member name="P:HttpServerLite.Statistics.SentPayloadBytes">
            <summary>
            The number of payload bytes sent (outgoing request body).
            </summary>
        </member>
        <member name="M:HttpServerLite.Statistics.#ctor">
            <summary>
            Initialize the statistics object.
            </summary>
        </member>
        <member name="M:HttpServerLite.Statistics.ToString">
            <summary>
            Human-readable version of the object.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:HttpServerLite.Statistics.Reset">
            <summary>
            Reset statistics other than StartTime and UpTime.
            </summary>
        </member>
        <member name="M:HttpServerLite.Statistics.RequestCountByMethod(HttpServerLite.HttpMethod)">
            <summary>
            Retrieve the number of requests received using a specific HTTP method.
            </summary>
            <param name="method">HTTP method.</param>
            <returns>Number of requests received using this method.</returns>
        </member>
        <member name="T:HttpServerLite.Webserver">
            <summary>
            HttpServerLite web server.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.IsListening">
            <summary>
            Indicates if the server is listening for connections.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.AcceptInvalidCertificates">
            <summary>
            For SSL, accept or deny invalid or otherwise unverifiable SSL certificates.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.MutuallyAuthenticate">
            <summary>
            For SSL, enable to require mutual authentication.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.StreamReadBufferSize">
            <summary>
            Buffer size to use when interacting with streams.
            </summary>
        </member>
        <member name="F:HttpServerLite.Webserver.Events">
            <summary>
            Set specific actions/callbacks to use when events are raised.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Stats">
            <summary>
            Webserver statistics.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.DefaultHeaders">
            <summary>
            Headers that will be added to every response unless previously set.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.AccessControl">
            <summary>
            Access control manager, i.e. default mode of operation, permit list, and deny list.
            </summary>
        </member>
        <member name="F:HttpServerLite.Webserver.PreRoutingHandler">
            <summary>
            Function to call prior to routing.  
            Return 'true' if the connection should be terminated.
            Return 'false' to allow the connection to continue routing.
            </summary>
        </member>
        <member name="F:HttpServerLite.Webserver.OptionsRoute">
            <summary>
            Function to call when an OPTIONS request is received.  Often used to handle CORS.  Leave as 'null' to use the default OPTIONS handler.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.ContentRoutes">
            <summary>
            Content routes; i.e. routes to specific files or folders for GET and HEAD requests.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.StaticRoutes">
            <summary>
            Static routes; i.e. routes with explicit matching and any HTTP method.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.DynamicRoutes">
            <summary>
            Dynamic routes; i.e. routes with regex matching and any HTTP method.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor(System.String,System.Int32,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Instantiate the webserver without SSL.
            </summary>
            <param name="hostname">Hostname or IP address on which to listen.</param>
            <param name="port">TCP port on which to listen.</param>
            <param name="defaultRoute">Default route.</param>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Instantiate the webserver with or without SSL.
            </summary>
            <param name="hostname">Hostname or IP address on which to listen.</param>
            <param name="port">TCP port on which to listen.</param>
            <param name="ssl">Enable or disable SSL.</param>
            <param name="pfxCertFilename">For SSL, the PFX certificate filename.</param>
            <param name="pfxCertPassword">For SSL, the PFX certificate password.</param>
            <param name="defaultRoute">Default route.</param>
        </member>
        <member name="M:HttpServerLite.Webserver.Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.Start">
            <summary>
            Start accepting new connections.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.Stop">
            <summary>
            Stop accepting new connections.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.Dispose(System.Boolean)">
            <summary>
            Tear down the server and dispose of background workers.
            </summary>
            <param name="disposing">Indicate if resources should be disposed.</param>
        </member>
    </members>
</doc>
